<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAHQSAAB0EgAAAAAAAAAA
        AABBMQL/QTEC/0ExAv9BMQL/QTIB/0EyAf9DMgH/QzIB/0MyAf9DMgH/QzIB/0MyAf9DMgH/QzIB/0Mx
        Av9DMgH/QTIB/0EzAP9BMwD/QTMA/0MyAP9DMgD/QzIA/0MyAP9DMgH/QzIB/0MyAf9DMgH/QTIB/0Ey
        Af9BMQL/QTEC/0MxAv9BMQL/QzEC/0ExAv9DMgH/QzIB/0MyAf9DMgH/QzIB/0MyAf9FMQH/QzIB/0Ux
        Af9DMgH/RTEC/0MxAv9DMgH/QTMA/0MyAf9DMgD/QzIB/0MyAP9DMgH/QzIB/0UxAf9DMgH/RTEB/0My
        Af9DMgH/QTIB/0MxAv9BMQL/RTEC/0MxAv9FMQL/QzEC/0UxAv9FMQL/RTEC/0UxAv9FMQL/RTEC/0cw
        Av9FMQL/RzAC/0UxAv9HMAL/RTEC/0UxAv9DMgH/RTEC/0UxAf9FMQL/RTEB/0UxAv9FMQL/RzAC/0Ux
        Av9HMAL/RTEC/0UxAv9DMQL/RTAD/0MwA/9FMQL/RTEB/0UxAv9FMQH/RTEC/0UxAf9FMQL/RTEB/0cx
        Af9HMQH/RzEB/0cxAf9HMQH/RzEB/0cxAf9HMQH/RTEB/0UxAf9FMQL/RTEB/0UxAv9FMQL/RzAC/0cw
        Av9HMAL/RzAC/0cwAv9HMAL/RTEC/0UxAv9FMQL/RTEC/0UxAf9FMgD/RTEB/0UyAP9FMQH/RTIA/0Ux
        Af9FMgD/RTIA/0UyAP9FMgD/RTIA/0UyAP9FMgD/RTIA/0UyAP9FMgD/RTIA/0UxAf9FMgD/RTEB/0Ux
        Af9FMQH/RTEB/0UxAf9FMQH/RTEB/0UxAf9FMQH/RTEB/0UxAf9FMQH/RTIA/0MyAP9FMgD/QzIA/0Uy
        AP9DMgD/QzIA/0MyAP9DMgD/QzMA/0MyAP9DMwD/QzIA/0MzAP9FMwD/QzIA/0MyAP9DMgD/QzIB/0My
        AP9DMgH/QzIB/0MyAf9DMgH/QzIB/0MyAf9DMgH/QzIB/0UxAf9FMgD/RTIA/0UyAP9DMgH/QTIB/0My
        Af9BMgH/QzIB/0EyAf9BMgH/QTIB/0EyAf9BMwD/QTIB/0EzAP9BMgH/QTMA/0MyAP9BMwD/QTIB/0Ey
        Af9BMQL/QTIB/0ExAv9BMQL/QTEC/0ExAv9BMQL/QTEC/0ExAv9BMgH/QzIB/0MyAf9DMgH/QzIB/0Mx
        Av9DMgH/QzEC/0MxAv9DMQL/QTEC/0ExAv9AMgL/QTEC/0AyAv9BMQL/QTEC/0ExAv9BMQL/QzIB/0Ey
        Af9BMQL/QTEC/0ExA/9BMQL/QTED/0AyAv9BMQP/QDIC/0ExA/9BMQL/QTEC/0MxAv9DMQL/QzIB/0My
        Af9DMgH/RTAD/0UxAv9ELwL/RjEE/0YxBP89KgD/QS4B/z4uAP9CLwT/Pi0C/z8sAP9BLgH/QC0A/0At
        AP9ELwL/PywA/z8sAP9CLwL/QC0C/0AtAP9CLwT/Pi4A/z8sAf8+LgD/PywB/0EuAf9BLgH/QCwA/0Qw
        Af9CLgD/Qy8A/0YyA/9BLQT/Qi4F/1VBGP9KNg3/TDkT/2hVL/9tXDX/STgR/1NBHP9VQx7/Y1Ir/1FA
        Gf9ZRiD/SDUP/088Fv9iTyn/ZlMt/0s4Ev9nVC7/ZVIs/1NCG/9YRyD/a1oz/0QzDP9bSiP/WUkf/15M
        I/9GNQr/a1gt/0c0B/9DMAX/QzAD/zsrB/86Kgb/koRg/8e5lf/azqz/g3dV/6uefv+ilXX/r6SE/9zR
        sf9qXz//5Nm5/4V4WP/26cn/QDQS/8q+nP+7r43/LiIA/7erif+onHr/oZd1/3dtS/+vpYP/wriW/62h
        f//CtpT/lIVk//nrx/+Le1b/pZZv/zgoA/9BMgv/QjMM/zwtBv9GORP/QDMN/zsvC/9mWjb/WEwq/1FH
        Jf81Kwn/SkAe/1ZLK/9ZTy3/al09/0Q4Fv84LAr/YFQy/09DIf9OQiD/W08t/1BGJP9PRSP/WlAu/z40
        Ev9QRiT/RTkX/1VJJf9SRCD/QzYQ/1FCG/9NPhf/QDEK/zstA/9FNAP/Py4A/0Y1BP9DMgH/QjID/z4u
        AP85KQD/PS0C/0AwBf8/Mgb/PC4E/zksAP87KwH/Pi4D/z8uA/8+LQL/OysA/0AwBf8+LgP/PS0C/zws
        Af8+MQX/PjEF/z4xBf9AMAX/Pi8B/z8vAf9BMQL/RDID/0IxAP9FMQH/RzQB/0IwAP9GNAD/Py0A/0g1
        Av89LAD/RDID/0MzBP9AMAL/PzAC/zsrAP8+LgP/QTEG/z0sAf87KgD/QzAF/z8sAP8/LwH/QTED/zwr
        AP8/LgP/QTEG/zwsAf88LAH/PS4A/z4uAP89LQD/QjAB/0AvAP9HMwP/RDEA/0gzAP9FMAD/RTME/0Qy
        A/9CMgP/SzsN/0g4Df9GNgz/SjwS/04/GP9NPhf/V0ci/1FBHP9bSyb/V0Ug/11LJv9dSyb/Xkwn/1xK
        Jf9ZRyL/Xk4p/1lJJP9TQx7/V0ci/1JFH/9QQx3/Tj4Z/1JDHP9KORL/RzcN/0IxBv9HNAf/Qi0A/0Yy
        A/9CMQD/RDQF/0AwAf9dTiD/ZVUr/2xdNv9kVC//cWM//3RmQv94aUj/fG1M/3tsS/98bUz/eWpJ/31s
        S/99bUn/gnJO/31vS/99bk3/fm9O/3lqSf9+b0//eWxM/29jQf9wYUD/a1s3/21dOP9sWzT/YE4l/0o3
        DP9ELwL/RTAD/0U0AP9CMwD/RDMA/0AxAP89LgD/RDYM/4NzTv80JgL/MSIC/zEkBP8vIgL/NSgI/yod
        AP9uYkD/NSYF/zEjAP8vIgD/NyoE/zYoBP8vIwH/MyYG/yweAf83Jwr/Lx8C/zYkB/81JAP/NiIA/0Mu
        CP9AKgD/STIE/0ozA/9FLgD/RjUA/0U0AP9DMgD/QDEA/0IyB/8tHgD///LO/0M0FP+MfmL/e25U/7Cj
        if8zJgz/pZl9/5GGav+7r5P/Y1g6/5iObP84Lgz/bGFB/5OIav9TRyv/q56E/3lsUv+hknj/g3VZ/3tr
        Tv+2o4L/NiMA/0cxB/9DLwD/RC4A/0k0Af9BLgD/STYD/z4sAP9EMwj/QC4J/zkoB/99b1L/q56E///0
        3v8sIQ3/4tbE/5ySgP/GvKr/LygV///25P++taH/UUox/4qDav/t5s3/eHBZ/5GIdP/Tyrb/0ci0/0c8
        Jv/h17//ZVo+///93f8tIQD/Pi8I/0IzBf8+LgD/QTIB/0g0BP9CMAH/Qi8C/0EvBv9ALgn/MCEB/ysd
        Af///uf/fnBd/6+jkf92bFv/vral/9jQv/+EfWz/l49+/4Z/bP+upZH/oZmC/5uSfv+nnor/3tfD/8K7
        p/9vZlL/wbmi/z00Gf/Ryaz/qJ9+/19WMf84LAT/PTAE/0M3B/88MAD/QC8A/0UzBP9BLgH/PCsA/0o5
        Ev/Jupn/IhQA/7Kli/9hVT3/cWZQ/4R5Zf/b0r7/QDcj/6Sdif9qYkv/9e3W/5CGbv9rYEX/g3hd/3ds
        Uf+4r5T/QDcc/2hfRP9pYUT/sKaI/01DIf+ajmr/iHxU/zcqAP9AMQP/Oy0A/0I0A/9DMgH/RzYF/z8v
        AP9CMgT/NiYA/8W1kP+zpYH/gHFR//nrzv9xZUn/aFxA/1ZKLv+ckHT/KyED/ywhA/+IfV3/hXhY/2tc
        O/+Gd1b/MyQD/zImBP8vIwH/rKB+/zImAv8yJQD/Oi4G/zgqAP87KwD/QDAC/0MzBP9DMgH/RDMC/0U0
        Af8+LQD/QjMC/0Q0Bf89LQD/NSUA/0AwBv9QPxj/SDcQ/1NCG/9YRyD/RjUO/zMjAP8/LwX/Py0E/zsq
        AP9ALwT/YlEm/z4tAv89LAH/RjUK/z8uA/87KgD/QDAC/0IyBP9DMAP/QC4A/0QwAf9DLwD/RjAA/0cw
        AP9GLwD/RDMC/0IxAP9EMwL/Py8A/0UyBf9BMQP/QzAF/0IvBP9BLgP/QS4B/0EsAP9CLgD/SjMF/0Yw
        AP9HMQH/RDAA/0YyAv9CLgD/Qi4A/0o2Bv9CLgD/RTEB/0UxAf9FMQH/RjIC/0QwAP9FMQH/SjQE/0cx
        Af9HMAD/STED/0kyAv9FMQL/RTEC/0UxAv9DMQL/RTAD/0MwA/9FMAP/RTAD/0UwA/9FMQL/RzAC/0cx
        Af9IMQH/SDEA/0gxAP9HMgD/RTEB/0MyAf9DMgH/QzIB/0MyAP9DMgD/QzIA/0MyAP9DMgH/QzIB/0Mx
        Av9FMQL/RTEC/0cwAv9HMAP/RzAC/0UxAf9FMQH/RTEB/0UxAf9FMQL/RTEC/0UxAv9FMQL/RTEC/0cw
        Av9HMQH/RzEB/0gxAf9IMQH/SDEA/0cyAP9FMQL/QzEC/0MxAv9DMgH/QzIB/0MyAP9DMgD/QzIA/0My
        Af9DMgH/QzIB/0MxAv9DMQL/QzEC/0UxAv9DMQL/RzIA/0cyAP9FMgD/RTIA/0UxAf9FMQH/QzIB/0Mx
        Av9DMQL/QzEC/0MxAv9DMQL/QzEC/0MxAv9DMQL/QzEC/0MwBf9BMAX/QzAD/0MwA/9DMQL/QzIB/0My
        Af9DMgH/QzIA/0MyAP9DMgD/QzIB/0MyAf9BMgH/QzIB/0EyAf9HMgD/RTMA/0UzAP9FMwD/RTIA/0My
        AP9DMgD/QzIB/0MyAf9BMQL/QTEC/0ExAv9BMQL/QTED/0ExA/9BMQP/QTAF/0MwBf9DMAX/QzAD/0Mx
        Av9DMgH/RTEB/0MyAP9FMgD/QzIA/0MyAP9DMgD/QzIA/0EzAP9BMwD/QTMA/0U0AP9DNAD/QzQA/0M0
        AP9DMwD/QzMA/0MzAP9BMwD/QTMA/0EyAf9BMgH/QDIB/0AyAf9AMgL/QDIC/0ExAv9DMAP/RTEC/0Ux
        Av9FMQL/RTEB/0UxAf9HMQH/RTIA/0cyAP9FMwD/RTMA/0UzAP9FMwD/QzQA/0MzAP9DNAD/QzIA/0Ez
        AP9DMgD/QzIA/0MyAP9DMgD/QzIA/0MyAP9DMgD/QzIA/0EyAf9BMgH/QTIB/0EyAf9BMgH/QzIB/0My
        Af9DMgH/RTEB/0UxAf9FMQH/RzEB/0cyAP9HMgD/RzIA/0UyAP9FMgD/RTIA/0UzAP9DMwD/QzMA/0Mz
        AP9BMQP/QDED/0ExA/9BMQL/QTEC/0MxAv9DMgH/RTEB/0UxAf9FMQH/RzEB/0cxAf9HMgD/RzIA/0cy
        AP9HMgD/QzIA/0EzAP9DMgD/QzIA/0MyAP9FMgD/RTEB/0UxAf9FMQH/RTEB/0UxAv9DMQL/QzEC/0Ex
        Av9BMQL/QTEC/0AwBv9AMAb/QDAF/0AwBf9BMQP/QTED/0UxAv9FMQL/RzEB/0cxAf9IMQH/SDEB/0gx
        AP9IMQD/SjEA/0gxAP9DMwD/QTMA/0EzAP9BMwD/QzIA/0MyAP9FMQH/RTEB/0UxAv9FMQL/QzAD/0Mw
        A/9BMQP/QTED/0ExA/9BMQP/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>